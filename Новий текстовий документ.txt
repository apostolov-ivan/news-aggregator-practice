# ---------- 1. Базовий образ Nginx ----------
FROM nginx:alpine

# ---------- 2. Очищаємо дефолтну статику (опційно) ----------
RUN rm -rf /usr/share/nginx/html/*

# ---------- 3. Копіюємо статичні файли фронтенду ----------
COPY frontend/ /usr/share/nginx/html/

# ---------- 4. Виставляємо порт для HTTP ----------
EXPOSE 80

# ---------- 5. Запуск Nginx у foreground ----------
CMD ["nginx", "-g", "daemon off;"]

services:
  backend:
    build:
      context: .
      dockerfile: backend/Dockerfile
    volumes:
      - ./config.py:/app/config.py:ro
      - ./requirements.txt:/app/requirements.txt:ro
    ports:
      - "8000:8000"
    restart: unless-stopped

  frontend:
    build:
      context: .
      dockerfile: frontend/Dockerfile
    ports:
      - "8001:80"
    depends_on:
      - backend
    restart: unless-stopped

name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  backend-tests:
    name: "Backend: запуск тестів"
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Python 3.13
        uses: actions/setup-python@v4
        with:
          python-version: '3.13'

      - name: Install dependencies
        working-directory: ./backend
        run: |
          python -m pip install --upgrade pip
          pip install -r ../requirements.txt

      - name: Запустити тести бекенду
        working-directory: ./backend
        run: |
          pip install pytest pytest-asyncio httpx
          pytest ../tests -q

  frontend-tests:
    name: "Frontend: перевірка доступності"
    runs-on: ubuntu-latest
    needs: backend-tests

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install http-server
        run: sudo npm install -g http-server

      - name: Запустити локальний сервер фронтенду
        run: |
          cd frontend
          nohup http-server -p 8001 &

      - name: Перевірити доступність index.html
        run: |
          sleep 2
          curl -f http://localhost:8001/index.html

def test_fetch_custom_feed(monkeypatch):
    news_store[STUDENT_ID] = []
    store[STUDENT_ID] = []

    response = client.post(f"/sources/{STUDENT_ID}", json={"url": "http://test.com/rss"})
    assert response.status_code == 200
    assert "http://test.com/rss" in response.json()["sources"]

    class DummyFeedCustom:
        entries = [{"title": "X", "link": "L", "published": "2025-04-28"}]

    monkeypatch.setattr(feedparser, "parse", lambda _: DummyFeedCustom())

    r = client.post(f"/fetch/{STUDENT_ID}")
    assert r.status_code == 200
    assert r.json() == {"fetched": 1}

def test_get_empty_sources():
    store[STUDENT_ID] = []
    res = client.get(f"/sources/{STUDENT_ID}")
    assert res.status_code == 200
    assert res.json() == {"sources": []}

def test_add_and_get_source():
    store[STUDENT_ID] = []
    res1 = client.post(f"/sources/{STUDENT_ID}", json={"url": "<https://example.com/rss>"})
    assert res1.status_code == 200
    assert "<https://example.com/rss>" in res1.json()["sources"]

    res2 = client.get(f"/sources/{STUDENT_ID}")
    assert res2.json()["sources"] == ["<https://example.com/rss>"]

docker run --rm -p 8000:8000 docker-compose

docker run -d -p 8000:8000 ghcr.io/apostolov-ivan/news_aggregator_practice-backend:latest 
timeout /t 5 /nobreak
curl http://localhost:8000/info
for /f "tokens=*" %i in ('docker ps -q --filter ancestor=ghcr.io/apostolov/news_aggregator_practice-backend:latest') do docker stop %i
